// Code generated by protoc-gen-go. DO NOT EDIT.
// source: utlcore/captcha.proto

package utlcore // import "grpc-swagger/protos/utlcore"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CaptchaResponse_Type int32

const (
	CaptchaResponse_UNDEFINED CaptchaResponse_Type = 0
	CaptchaResponse_GEETEST   CaptchaResponse_Type = 1
	CaptchaResponse_GRAPHICAL CaptchaResponse_Type = 2
)

var CaptchaResponse_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "GEETEST",
	2: "GRAPHICAL",
}
var CaptchaResponse_Type_value = map[string]int32{
	"UNDEFINED": 0,
	"GEETEST":   1,
	"GRAPHICAL": 2,
}

func (x CaptchaResponse_Type) String() string {
	return proto.EnumName(CaptchaResponse_Type_name, int32(x))
}
func (CaptchaResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{3, 0}
}

type CaptchaRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CaptchaRequest) Reset()         { *m = CaptchaRequest{} }
func (m *CaptchaRequest) String() string { return proto.CompactTextString(m) }
func (*CaptchaRequest) ProtoMessage()    {}
func (*CaptchaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{0}
}
func (m *CaptchaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptchaRequest.Unmarshal(m, b)
}
func (m *CaptchaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptchaRequest.Marshal(b, m, deterministic)
}
func (dst *CaptchaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptchaRequest.Merge(dst, src)
}
func (m *CaptchaRequest) XXX_Size() int {
	return xxx_messageInfo_CaptchaRequest.Size(m)
}
func (m *CaptchaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptchaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CaptchaRequest proto.InternalMessageInfo

type GeetestCaptchaResponse struct {
	Challenge            string   `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeetestCaptchaResponse) Reset()         { *m = GeetestCaptchaResponse{} }
func (m *GeetestCaptchaResponse) String() string { return proto.CompactTextString(m) }
func (*GeetestCaptchaResponse) ProtoMessage()    {}
func (*GeetestCaptchaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{1}
}
func (m *GeetestCaptchaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeetestCaptchaResponse.Unmarshal(m, b)
}
func (m *GeetestCaptchaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeetestCaptchaResponse.Marshal(b, m, deterministic)
}
func (dst *GeetestCaptchaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeetestCaptchaResponse.Merge(dst, src)
}
func (m *GeetestCaptchaResponse) XXX_Size() int {
	return xxx_messageInfo_GeetestCaptchaResponse.Size(m)
}
func (m *GeetestCaptchaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GeetestCaptchaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GeetestCaptchaResponse proto.InternalMessageInfo

func (m *GeetestCaptchaResponse) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

type GraphicalCaptchaResponse struct {
	Graph                []byte   `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphicalCaptchaResponse) Reset()         { *m = GraphicalCaptchaResponse{} }
func (m *GraphicalCaptchaResponse) String() string { return proto.CompactTextString(m) }
func (*GraphicalCaptchaResponse) ProtoMessage()    {}
func (*GraphicalCaptchaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{2}
}
func (m *GraphicalCaptchaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphicalCaptchaResponse.Unmarshal(m, b)
}
func (m *GraphicalCaptchaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphicalCaptchaResponse.Marshal(b, m, deterministic)
}
func (dst *GraphicalCaptchaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphicalCaptchaResponse.Merge(dst, src)
}
func (m *GraphicalCaptchaResponse) XXX_Size() int {
	return xxx_messageInfo_GraphicalCaptchaResponse.Size(m)
}
func (m *GraphicalCaptchaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphicalCaptchaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GraphicalCaptchaResponse proto.InternalMessageInfo

func (m *GraphicalCaptchaResponse) GetGraph() []byte {
	if m != nil {
		return m.Graph
	}
	return nil
}

type CaptchaResponse struct {
	Type CaptchaResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protos.CaptchaResponse_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Captcha:
	//	*CaptchaResponse_Gt
	//	*CaptchaResponse_Graph
	Captcha              isCaptchaResponse_Captcha `protobuf_oneof:"captcha"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CaptchaResponse) Reset()         { *m = CaptchaResponse{} }
func (m *CaptchaResponse) String() string { return proto.CompactTextString(m) }
func (*CaptchaResponse) ProtoMessage()    {}
func (*CaptchaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{3}
}
func (m *CaptchaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptchaResponse.Unmarshal(m, b)
}
func (m *CaptchaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptchaResponse.Marshal(b, m, deterministic)
}
func (dst *CaptchaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptchaResponse.Merge(dst, src)
}
func (m *CaptchaResponse) XXX_Size() int {
	return xxx_messageInfo_CaptchaResponse.Size(m)
}
func (m *CaptchaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptchaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CaptchaResponse proto.InternalMessageInfo

func (m *CaptchaResponse) GetType() CaptchaResponse_Type {
	if m != nil {
		return m.Type
	}
	return CaptchaResponse_UNDEFINED
}

type isCaptchaResponse_Captcha interface {
	isCaptchaResponse_Captcha()
}

type CaptchaResponse_Gt struct {
	Gt *GeetestCaptchaResponse `protobuf:"bytes,2,opt,name=gt,proto3,oneof"`
}

type CaptchaResponse_Graph struct {
	Graph *GraphicalCaptchaResponse `protobuf:"bytes,3,opt,name=graph,proto3,oneof"`
}

func (*CaptchaResponse_Gt) isCaptchaResponse_Captcha() {}

func (*CaptchaResponse_Graph) isCaptchaResponse_Captcha() {}

func (m *CaptchaResponse) GetCaptcha() isCaptchaResponse_Captcha {
	if m != nil {
		return m.Captcha
	}
	return nil
}

func (m *CaptchaResponse) GetGt() *GeetestCaptchaResponse {
	if x, ok := m.GetCaptcha().(*CaptchaResponse_Gt); ok {
		return x.Gt
	}
	return nil
}

func (m *CaptchaResponse) GetGraph() *GraphicalCaptchaResponse {
	if x, ok := m.GetCaptcha().(*CaptchaResponse_Graph); ok {
		return x.Graph
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CaptchaResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CaptchaResponse_OneofMarshaler, _CaptchaResponse_OneofUnmarshaler, _CaptchaResponse_OneofSizer, []interface{}{
		(*CaptchaResponse_Gt)(nil),
		(*CaptchaResponse_Graph)(nil),
	}
}

func _CaptchaResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CaptchaResponse)
	// captcha
	switch x := m.Captcha.(type) {
	case *CaptchaResponse_Gt:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Gt); err != nil {
			return err
		}
	case *CaptchaResponse_Graph:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Graph); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CaptchaResponse.Captcha has unexpected type %T", x)
	}
	return nil
}

func _CaptchaResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CaptchaResponse)
	switch tag {
	case 2: // captcha.gt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GeetestCaptchaResponse)
		err := b.DecodeMessage(msg)
		m.Captcha = &CaptchaResponse_Gt{msg}
		return true, err
	case 3: // captcha.graph
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphicalCaptchaResponse)
		err := b.DecodeMessage(msg)
		m.Captcha = &CaptchaResponse_Graph{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CaptchaResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CaptchaResponse)
	// captcha
	switch x := m.Captcha.(type) {
	case *CaptchaResponse_Gt:
		s := proto.Size(x.Gt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CaptchaResponse_Graph:
		s := proto.Size(x.Graph)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GeetestCaptchaVerify struct {
	GtChallenge          string   `protobuf:"bytes,1,opt,name=gt_challenge,json=gtChallenge,proto3" json:"gt_challenge,omitempty"`
	GtValidate           string   `protobuf:"bytes,2,opt,name=gt_validate,json=gtValidate,proto3" json:"gt_validate,omitempty"`
	GtSeccode            string   `protobuf:"bytes,3,opt,name=gt_seccode,json=gtSeccode,proto3" json:"gt_seccode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeetestCaptchaVerify) Reset()         { *m = GeetestCaptchaVerify{} }
func (m *GeetestCaptchaVerify) String() string { return proto.CompactTextString(m) }
func (*GeetestCaptchaVerify) ProtoMessage()    {}
func (*GeetestCaptchaVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{4}
}
func (m *GeetestCaptchaVerify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeetestCaptchaVerify.Unmarshal(m, b)
}
func (m *GeetestCaptchaVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeetestCaptchaVerify.Marshal(b, m, deterministic)
}
func (dst *GeetestCaptchaVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeetestCaptchaVerify.Merge(dst, src)
}
func (m *GeetestCaptchaVerify) XXX_Size() int {
	return xxx_messageInfo_GeetestCaptchaVerify.Size(m)
}
func (m *GeetestCaptchaVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_GeetestCaptchaVerify.DiscardUnknown(m)
}

var xxx_messageInfo_GeetestCaptchaVerify proto.InternalMessageInfo

func (m *GeetestCaptchaVerify) GetGtChallenge() string {
	if m != nil {
		return m.GtChallenge
	}
	return ""
}

func (m *GeetestCaptchaVerify) GetGtValidate() string {
	if m != nil {
		return m.GtValidate
	}
	return ""
}

func (m *GeetestCaptchaVerify) GetGtSeccode() string {
	if m != nil {
		return m.GtSeccode
	}
	return ""
}

type GraphicalCaptchaVerify struct {
	AuthCode             string   `protobuf:"bytes,1,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphicalCaptchaVerify) Reset()         { *m = GraphicalCaptchaVerify{} }
func (m *GraphicalCaptchaVerify) String() string { return proto.CompactTextString(m) }
func (*GraphicalCaptchaVerify) ProtoMessage()    {}
func (*GraphicalCaptchaVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{5}
}
func (m *GraphicalCaptchaVerify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphicalCaptchaVerify.Unmarshal(m, b)
}
func (m *GraphicalCaptchaVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphicalCaptchaVerify.Marshal(b, m, deterministic)
}
func (dst *GraphicalCaptchaVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphicalCaptchaVerify.Merge(dst, src)
}
func (m *GraphicalCaptchaVerify) XXX_Size() int {
	return xxx_messageInfo_GraphicalCaptchaVerify.Size(m)
}
func (m *GraphicalCaptchaVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphicalCaptchaVerify.DiscardUnknown(m)
}

var xxx_messageInfo_GraphicalCaptchaVerify proto.InternalMessageInfo

func (m *GraphicalCaptchaVerify) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

type CaptchaVerifyRequest struct {
	Type CaptchaResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protos.CaptchaResponse_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*CaptchaVerifyRequest_Gt
	//	*CaptchaVerifyRequest_Graph
	Content              isCaptchaVerifyRequest_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CaptchaVerifyRequest) Reset()         { *m = CaptchaVerifyRequest{} }
func (m *CaptchaVerifyRequest) String() string { return proto.CompactTextString(m) }
func (*CaptchaVerifyRequest) ProtoMessage()    {}
func (*CaptchaVerifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_captcha_54729872ebd7df39, []int{6}
}
func (m *CaptchaVerifyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptchaVerifyRequest.Unmarshal(m, b)
}
func (m *CaptchaVerifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptchaVerifyRequest.Marshal(b, m, deterministic)
}
func (dst *CaptchaVerifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptchaVerifyRequest.Merge(dst, src)
}
func (m *CaptchaVerifyRequest) XXX_Size() int {
	return xxx_messageInfo_CaptchaVerifyRequest.Size(m)
}
func (m *CaptchaVerifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptchaVerifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CaptchaVerifyRequest proto.InternalMessageInfo

func (m *CaptchaVerifyRequest) GetType() CaptchaResponse_Type {
	if m != nil {
		return m.Type
	}
	return CaptchaResponse_UNDEFINED
}

type isCaptchaVerifyRequest_Content interface {
	isCaptchaVerifyRequest_Content()
}

type CaptchaVerifyRequest_Gt struct {
	Gt *GeetestCaptchaVerify `protobuf:"bytes,2,opt,name=gt,proto3,oneof"`
}

type CaptchaVerifyRequest_Graph struct {
	Graph *GraphicalCaptchaVerify `protobuf:"bytes,3,opt,name=graph,proto3,oneof"`
}

func (*CaptchaVerifyRequest_Gt) isCaptchaVerifyRequest_Content() {}

func (*CaptchaVerifyRequest_Graph) isCaptchaVerifyRequest_Content() {}

func (m *CaptchaVerifyRequest) GetContent() isCaptchaVerifyRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *CaptchaVerifyRequest) GetGt() *GeetestCaptchaVerify {
	if x, ok := m.GetContent().(*CaptchaVerifyRequest_Gt); ok {
		return x.Gt
	}
	return nil
}

func (m *CaptchaVerifyRequest) GetGraph() *GraphicalCaptchaVerify {
	if x, ok := m.GetContent().(*CaptchaVerifyRequest_Graph); ok {
		return x.Graph
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CaptchaVerifyRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CaptchaVerifyRequest_OneofMarshaler, _CaptchaVerifyRequest_OneofUnmarshaler, _CaptchaVerifyRequest_OneofSizer, []interface{}{
		(*CaptchaVerifyRequest_Gt)(nil),
		(*CaptchaVerifyRequest_Graph)(nil),
	}
}

func _CaptchaVerifyRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CaptchaVerifyRequest)
	// content
	switch x := m.Content.(type) {
	case *CaptchaVerifyRequest_Gt:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Gt); err != nil {
			return err
		}
	case *CaptchaVerifyRequest_Graph:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Graph); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CaptchaVerifyRequest.Content has unexpected type %T", x)
	}
	return nil
}

func _CaptchaVerifyRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CaptchaVerifyRequest)
	switch tag {
	case 2: // content.gt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GeetestCaptchaVerify)
		err := b.DecodeMessage(msg)
		m.Content = &CaptchaVerifyRequest_Gt{msg}
		return true, err
	case 3: // content.graph
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphicalCaptchaVerify)
		err := b.DecodeMessage(msg)
		m.Content = &CaptchaVerifyRequest_Graph{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CaptchaVerifyRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CaptchaVerifyRequest)
	// content
	switch x := m.Content.(type) {
	case *CaptchaVerifyRequest_Gt:
		s := proto.Size(x.Gt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CaptchaVerifyRequest_Graph:
		s := proto.Size(x.Graph)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*CaptchaRequest)(nil), "protos.CaptchaRequest")
	proto.RegisterType((*GeetestCaptchaResponse)(nil), "protos.GeetestCaptchaResponse")
	proto.RegisterType((*GraphicalCaptchaResponse)(nil), "protos.GraphicalCaptchaResponse")
	proto.RegisterType((*CaptchaResponse)(nil), "protos.CaptchaResponse")
	proto.RegisterType((*GeetestCaptchaVerify)(nil), "protos.GeetestCaptchaVerify")
	proto.RegisterType((*GraphicalCaptchaVerify)(nil), "protos.GraphicalCaptchaVerify")
	proto.RegisterType((*CaptchaVerifyRequest)(nil), "protos.CaptchaVerifyRequest")
	proto.RegisterEnum("protos.CaptchaResponse_Type", CaptchaResponse_Type_name, CaptchaResponse_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CaptchaClient is the client API for Captcha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CaptchaClient interface {
	GetCaptcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (Captcha_GetCaptchaClient, error)
	VerifyCaptcha(ctx context.Context, in *CaptchaVerifyRequest, opts ...grpc.CallOption) (*ServerStatus, error)
}

type captchaClient struct {
	cc *grpc.ClientConn
}

func NewCaptchaClient(cc *grpc.ClientConn) CaptchaClient {
	return &captchaClient{cc}
}

func (c *captchaClient) GetCaptcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (Captcha_GetCaptchaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captcha_serviceDesc.Streams[0], "/protos.Captcha/GetCaptcha", opts...)
	if err != nil {
		return nil, err
	}
	x := &captchaGetCaptchaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captcha_GetCaptchaClient interface {
	Recv() (*CaptchaResponse, error)
	grpc.ClientStream
}

type captchaGetCaptchaClient struct {
	grpc.ClientStream
}

func (x *captchaGetCaptchaClient) Recv() (*CaptchaResponse, error) {
	m := new(CaptchaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captchaClient) VerifyCaptcha(ctx context.Context, in *CaptchaVerifyRequest, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := c.cc.Invoke(ctx, "/protos.Captcha/VerifyCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptchaServer is the server API for Captcha service.
type CaptchaServer interface {
	GetCaptcha(*CaptchaRequest, Captcha_GetCaptchaServer) error
	VerifyCaptcha(context.Context, *CaptchaVerifyRequest) (*ServerStatus, error)
}

func RegisterCaptchaServer(s *grpc.Server, srv CaptchaServer) {
	s.RegisterService(&_Captcha_serviceDesc, srv)
}

func _Captcha_GetCaptcha_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptchaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptchaServer).GetCaptcha(m, &captchaGetCaptchaServer{stream})
}

type Captcha_GetCaptchaServer interface {
	Send(*CaptchaResponse) error
	grpc.ServerStream
}

type captchaGetCaptchaServer struct {
	grpc.ServerStream
}

func (x *captchaGetCaptchaServer) Send(m *CaptchaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Captcha_VerifyCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).VerifyCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Captcha/VerifyCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).VerifyCaptcha(ctx, req.(*CaptchaVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Captcha_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Captcha",
	HandlerType: (*CaptchaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyCaptcha",
			Handler:    _Captcha_VerifyCaptcha_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCaptcha",
			Handler:       _Captcha_GetCaptcha_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "utlcore/captcha.proto",
}

func init() { proto.RegisterFile("utlcore/captcha.proto", fileDescriptor_captcha_54729872ebd7df39) }

var fileDescriptor_captcha_54729872ebd7df39 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x43, 0xa1, 0x78, 0xd2, 0x96, 0x68, 0x65, 0x42, 0x48, 0x43, 0x1b, 0x7c, 0xaa, 0x90,
	0x88, 0xd3, 0x20, 0x2a, 0xc4, 0x2d, 0x49, 0xdd, 0xa4, 0x12, 0x54, 0x95, 0x13, 0x7a, 0xe0, 0x12,
	0x6d, 0x9d, 0x61, 0x63, 0xe1, 0x7a, 0x8d, 0x3d, 0x09, 0xca, 0x95, 0x5f, 0xe0, 0x4f, 0xb8, 0xf2,
	0x19, 0xfc, 0x02, 0x57, 0xfe, 0x01, 0xc5, 0x6b, 0x07, 0x62, 0x9a, 0x0b, 0x27, 0xcb, 0xf3, 0xde,
	0x9b, 0x99, 0xb7, 0xcf, 0x6b, 0x78, 0x38, 0x23, 0xdf, 0x95, 0x11, 0x5a, 0x2e, 0x0f, 0xc9, 0x9d,
	0xf2, 0x66, 0x18, 0x49, 0x92, 0xec, 0x5e, 0xf2, 0x88, 0x6b, 0xc6, 0x0a, 0x96, 0x37, 0x37, 0x32,
	0x50, 0x68, 0xad, 0x2e, 0xa4, 0x14, 0x3e, 0x5a, 0x3c, 0xf4, 0x2c, 0x1e, 0x04, 0x92, 0x38, 0x79,
	0x32, 0x88, 0x15, 0x6a, 0x96, 0x61, 0xaf, 0xa7, 0x9a, 0x39, 0xf8, 0x69, 0x86, 0x31, 0x99, 0x27,
	0x50, 0xe9, 0x23, 0x12, 0xc6, 0xb4, 0x02, 0xe2, 0x50, 0x06, 0x31, 0xb2, 0x3a, 0xe8, 0xee, 0x94,
	0xfb, 0x3e, 0x06, 0x02, 0xab, 0x5a, 0x43, 0x3b, 0xd2, 0x9d, 0x3f, 0x05, 0xb3, 0x05, 0xd5, 0x7e,
	0xc4, 0xc3, 0xa9, 0xe7, 0x72, 0x3f, 0xaf, 0x34, 0xe0, 0xae, 0x58, 0x62, 0x89, 0x6a, 0xc7, 0x51,
	0x2f, 0xe6, 0x2f, 0x0d, 0x1e, 0xe4, 0x99, 0x2d, 0xd8, 0xa2, 0x45, 0xa8, 0xda, 0xef, 0xb5, 0xeb,
	0x6a, 0xcb, 0xb8, 0x99, 0xa3, 0x35, 0x47, 0x8b, 0x10, 0x9d, 0x84, 0xc9, 0x5a, 0x50, 0x14, 0x54,
	0x2d, 0x36, 0xb4, 0xa3, 0x52, 0xfb, 0x20, 0xe3, 0xdf, 0xee, 0x60, 0x50, 0x70, 0x8a, 0x82, 0xd8,
	0xab, 0x6c, 0x9b, 0x3b, 0x89, 0xa8, 0xb1, 0x12, 0x6d, 0x58, 0x7f, 0x50, 0xc8, 0x36, 0x3e, 0x86,
	0xad, 0xe5, 0x64, 0xb6, 0x0b, 0xfa, 0xbb, 0x8b, 0x53, 0xfb, 0xec, 0xfc, 0xc2, 0x3e, 0x2d, 0x17,
	0x58, 0x09, 0xb6, 0xfb, 0xb6, 0x3d, 0xb2, 0x87, 0xa3, 0xb2, 0xb6, 0xc4, 0xfa, 0x4e, 0xe7, 0x72,
	0x70, 0xde, 0xeb, 0xbc, 0x29, 0x17, 0xbb, 0x3a, 0x6c, 0xa7, 0x69, 0x99, 0x0b, 0x30, 0xd6, 0xf7,
	0xba, 0xc2, 0xc8, 0xfb, 0xb0, 0x60, 0x4f, 0x61, 0x47, 0xd0, 0x38, 0x7f, 0xb4, 0x25, 0x41, 0xbd,
	0xac, 0xc4, 0x0e, 0xa1, 0x24, 0x68, 0x3c, 0xe7, 0xbe, 0x37, 0xe1, 0x84, 0x89, 0x5b, 0xdd, 0x01,
	0x41, 0x57, 0x69, 0x85, 0x3d, 0x01, 0x10, 0x34, 0x8e, 0xd1, 0x75, 0xe5, 0x04, 0x13, 0x63, 0xba,
	0xa3, 0x0b, 0x1a, 0xaa, 0x82, 0xf9, 0x12, 0x2a, 0x79, 0x77, 0xe9, 0xf0, 0x7d, 0xd0, 0xf9, 0x8c,
	0xa6, 0xe3, 0x44, 0xa7, 0x26, 0xdf, 0x5f, 0x16, 0x7a, 0x4b, 0xd9, 0x77, 0x0d, 0x8c, 0x35, 0x7a,
	0xfa, 0x91, 0xfc, 0x47, 0x4c, 0xcd, 0xbf, 0x62, 0xaa, 0xdf, 0x1e, 0x93, 0x1a, 0x91, 0x86, 0x74,
	0xb2, 0x1e, 0xd2, 0xc1, 0xa6, 0x90, 0x56, 0x22, 0x45, 0x4f, 0xce, 0x5b, 0x06, 0x84, 0x01, 0xb5,
	0xbf, 0x69, 0xb0, 0x9d, 0xb2, 0x58, 0x07, 0xa0, 0x8f, 0xd9, 0x20, 0x56, 0xf9, 0x67, 0xe1, 0xc4,
	0x56, 0xed, 0xd1, 0x06, 0x23, 0x66, 0xa1, 0xa5, 0xb1, 0x09, 0xec, 0xaa, 0x61, 0x59, 0x97, 0xbc,
	0xed, 0xb5, 0x23, 0xaa, 0x19, 0x19, 0x3a, 0xc4, 0x68, 0x8e, 0xd1, 0x90, 0x38, 0xcd, 0x62, 0xf3,
	0xf0, 0xcb, 0x8f, 0x9f, 0x5f, 0x8b, 0x8f, 0x4d, 0xc3, 0x9a, 0x1f, 0x5b, 0x31, 0xba, 0xb3, 0xc8,
	0xa3, 0x45, 0x76, 0x9f, 0x5f, 0x6b, 0xcf, 0xba, 0x36, 0xd4, 0x64, 0x24, 0x9a, 0xd7, 0x52, 0x12,
	0x0f, 0xc3, 0xac, 0x47, 0x7a, 0xb3, 0xbb, 0xf0, 0xf6, 0xac, 0x73, 0xc9, 0xdd, 0x8f, 0x5c, 0xe0,
	0xfb, 0x7d, 0x11, 0x85, 0xee, 0xf3, 0xf8, 0x33, 0x17, 0x02, 0x23, 0x4b, 0x11, 0xad, 0x94, 0x78,
	0xad, 0xfe, 0x09, 0x2f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x08, 0x4d, 0x11, 0x8b, 0x33, 0x04,
	0x00, 0x00,
}
